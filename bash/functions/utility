#!/bin/bash

# Predefined colors for terminal background using AppleScripts below.
function colorme {
  if [[ $1 == "blue" ]]; then
    iterm_bg 12 25 50 0.8
  elif [[ $1 == "red" ]]; then
    iterm_bg 75 0 10 0.8
  elif [[ $1 == "green" ]]; then
    iterm_bg 10 80 30 0.8;
  elif [[ $1 == "black" ]]; then
    iterm_bg 0 0 0 0.7;
  fi
}

# Convert all filenames in the current directory to lowercase
function downcase_dir {
  for f in *; do mv "$f" "`echo $f | tr "[:upper:]" "[:lower:]"`"; done
}

# Replaces whitespaces with underscores for every file in the specified directory.
function replace_whitespace {
  local renamed=0
  if [ "${1}" ] && [ -d "${1}" ]; then
    for filename in "${1}"/*; do
      echo "${filename}" | grep -q " "
      if [ $? -eq 0 ]; then
        mv "${filename}" $(echo "${filename}" | sed -e "s/ //g")
        let renamed+=1
      fi
    done
    echo "${renamed} file(s) renamed."
  else
    echo "Invalid path."
  fi
}

# Toggle hidden file visiblity in finder windows. Mapped in BTT as hyper+s.
function toggle_hidden_files {
  local status=$(defaults read com.apple.finder AppleShowAllFiles)
  if [ $status == YES ]; then
    defaults write com.apple.finder AppleShowAllFiles NO
  else
    defaults write com.apple.finder AppleShowAllFiles YES
  fi
  killall Finder
}

# Change the background color of the current terminal window.
# Useful for distinguishing different servers using SSH.
function iterm_bg {
  local R=$1 G=$2 B=$3 A=`ruby -e "print 1.0 - $4"`
  /usr/bin/osascript <<EOF
tell application "iTerm"
  tell the current terminal
    tell the current session
      set background color to {$(($R*65535/255)), $(($G*65535/255)), $(($B*65535/255))}
      set transparency to "$A"
    end tell
  end tell
end tell
EOF
}

# Change the foreground color (default text color) of the current terminal window.
function iterm_fg {
  local R=$1 G=$2 B=$3
  /usr/bin/osascript <<EOF
tell application "iTerm"
  tell the current terminal
    tell the current session
      set foreground color to {$(($R*65535/255)), $(($G*65535/255)), $(($B*65535/255))}
    end tell
  end tell
end tell
EOF
}

# Create a Notification Center notification (top right of screen).
# EX: notify_me "Humani.se Down", "Can't ping... destination host unreachable."
function notify_me {
  /usr/bin/osascript <<EOF
    display notification "${2}" with title "${1}"
EOF
}

# Prevent line wrapping just for this command
function no-wrap {
  tput rmam
  $@
  tput smam
}
