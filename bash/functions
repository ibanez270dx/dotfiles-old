#!/bin/bash

###########################
# Funny Or Die
###########################

function fod {
  cd "${HOME}/Dev/funnyordie"
  if [[ $1 == "restart" || $1 == "r" ]]; then
    sudo powify server restart
  elif [[ $1 == "p" || $1 == "periodic" ]]; then
    ${HOME}/Dev/funnyordie/script/runner Periodic::Manager.run
  elif [[ $1 == "t" || $1 == "tail" ]]; then
    tail -f "${HOME}/Dev/funnyordie/log/development.log"
  elif [[ $1 == "staging" ]]; then
    ssh_color_wrapper capistrano@172.16.160.168;
  fi
}

###########################
# Ruby
###########################

# pass rails version:
# uninstall_all_gems 2.2.2
uninstall_all_gems() {
  list=`gem list --no-versions`
  for gem in $list; do
    gem uninstall ${1} $gem -aIx
  done
  gem list
}

###########################
# MySQL
###########################

# Backup a table. Defaults to *_backup,
# pass additional argument for *_whatever.
function backup_table {
    local t1=${1}
    local t2=${1}_${2:-backup}
    rails db << EOF
    \! echo "dropping $t2 if it exists..."
    drop table if exists $t2;
    \! echo "creating $t2..."
    create table $t2 like $t1;
    \! echo "copying $t1 to $t2..."
    insert into $t2 select * from $t1;
    \! echo "Done!"
    select count(*) from $t2;
EOF
}

# Restore a table
function restore_table {
  local t1=${1}
  local t2=${1}_${2:-backup}
  rails db << EOF
    \! echo "dropping $t1..."
    drop table $1;
    \! echo "creating $t1..."
    create table $t1 like $t2;
    \! echo "copying $t2 to $t1...";
    insert into $t1 select * from $t2;
    \! echo "Done!"
    select count(*) from $t1;
EOF
}

###########################
# Utility
###########################

# Replaces whitespaces with underscores for
# every file in the specified directory.
function replace_whitespace {
  local renamed=0
  if [ "${1}" ] && [ -d "${1}" ]; then
    for filename in "${1}"/*; do
      echo "${filename}" | grep -q " "
      if [ $? -eq 0 ]; then
        mv "${filename}" $(echo "${filename}" | sed -e "s/ //g")
        let renamed+=1
      fi
    done
    echo "${renamed} file(s) renamed."
  else
    echo "Invalid path."
  fi
}

# Toggle hidden file visiblity in finder windows.
function toggle_hidden_files {
  local status=$(defaults read com.apple.finder AppleShowAllFiles)
  if [ $status == YES ]; then
    defaults write com.apple.finder AppleShowAllFiles NO
  else
    defaults write com.apple.finder AppleShowAllFiles YES
  fi
  killall Finder
}

# Use web API to minify files passed in.
# Only works w/ javascript files ATM.
function minify {
  if [ $# -eq 0 ]; then
    echo "No arguments supplied."
    echo "Usage: > minify myscript.js"
  elif [ -e ${1} ]; then
    file=(${1//./ })
    if [ ${file[1]} == 'js' ]; then
      echo "Minifying Javascript file... "
      curl -X POST -s --data-urlencode "input@${file[0]}.js" http://javascript-minifier.com/raw > ${file[0]}.min.js
    fi
  else
    echo "Couldn't find ${1}"
  fi
}

###########################
# AppleScripts
###########################

# Change the background color of the current
# terminal window. Useful for distinguishing
# different servers using SSH.
function iterm_bg {
  local R=$1
  local G=$2
  local B=$3
  local A=`ruby -e "print 1.0 - $4"`
  /usr/bin/osascript <<EOF
tell application "iTerm"
  tell the current terminal
    tell the current session
      set background color to {$(($R*65535/255)), $(($G*65535/255)), $(($B*65535/255))}
      set transparency to "$A"
    end tell
  end tell
end tell
EOF
}

function iterm_fg {
  local R=$1
  local G=$2
  local B=$3
  /usr/bin/osascript <<EOF
tell application "iTerm"
  tell the current terminal
    tell the current session
      set foreground color to {$(($R*65535/255)), $(($G*65535/255)), $(($B*65535/255))}
    end tell
  end tell
end tell
EOF
}

# Create a Notification Center notification (top right of screen).
# EX: notify_me "Humani.se Down", "Can't ping... destination host unreachable."
function notify_me {
  /usr/bin/osascript <<EOF
    display notification "${2}" with title "${1}"
EOF
}

###########################
# Dotfiles
###########################

# TODO: link function
# * should comment out all bash initialization scripts and source the .dotfile version

# TODO: unlink function
# * should remove sourcing of .dotfile initializers and uncomment bash initialization scripts

function dotfiles {
  if [[ $1 == "link" ]]
  then
    timestamp=$(($(date +'%s * 1000 + %-N / 1000000')))
    for dotfile in $DOTFILES/config/*; do
      local target="${HOME}/.${dotfile##*/}"
      if [ -f $target ]; then
        mv $target "${target}.backup.${timestamp}"
        echo "${target} exists! Creating backup..."
      fi
      ln -s $dotfile $target
      echo -e "${dotfile##*/} linked successfully\n"
    done
  elif [[ $1 == "unlink" ]]
  then
    echo "todo"
    # Iterate through home folder to find backup conf files for dotfiles/config.
    # If exists, delete link, restore latest backup.
  else
    cd "${DOTFILES}"
  fi
}
